						#System Makefile#
						#---------------#

#Project 		: SMS Relay Controller
#Major Version	: 001
#Minor Version	: 001
#Programmer		: Raghavendra C Ganiga
#Programmer		: Pratyush Gehlot

# System editable variables
#----------------------------------------------------------------------------------------------------------------
#Project Name variable with no spaces
PROJECT_NAME = SmsController


# MCU name
MCU = atmega32

# Output format. (can be srec, ihex, binary)
FORMAT = ihex

# Target file name (without extension).
TARGET = main

# Optimization level, can be [0, 1, 2, 3, s]. 0 turns off optimization.
# (Note: 3 is not always the best optimization level. See avr-libc FAQ.)
OPT = 2

# Where uC/OS-II and the port are
# For *nix systems you can use something like the next two lines if you 
# have uC/OS-II v2.70
# UCOSDIR = $(wildcard ~/Micrium/Software/uCOS-II/Source)
# PORTDIR = $(wildcard ~/Micrium/Software/uCOS-II/Ports/AVR/ATmega128/GNU/jlu)
# If you have uC/OS-II v2.52, use
#UCOSDIR = $(wildcard ~/ucos-II/software/uCOS-II/Source)
#PORTDIR = $(wildcard ~/Micrium/Software/uCOS-II/Ports/AVR/ATmega128/GNU/jlu)
# With Windows, use something like the next lines
# UCOSDIR = c:/Micrium/Software/uCOS-II/Source
PORTDIR = ./uCOS-II/Ports/AVR/ATmega128/GNU/jlu
UCOSDIR = ./uCOS-II/Source
PROJDIR = .
APPDIR = $(PROJDIR)/App
BOARDDIR = $(PROJDIR)/Board
OBJDIR = $(PROJDIR)/objs
OBJOTHDIR = $(OBJDIR)/other
# PORTDIR = c:/SOFTWARE/uCOS-II/Ports/AVR/ATmega128/GNU/jlu

INCDIR1	= $(UCOSDIR)
INCDIR2	= $(PORTDIR)
INCDIR3 = $(PROJDIR)/include
# INCDIR1	= $(UCOSDIR)/SOURCE
# INCDIR2	= $(PORTDIR)/SOURCE

# List C source files here. (C dependencies are automatically generated.)
SRC = $(TARGET).c
BOARDSRC = $(BOARDDIR)/boardinit.c
APPSRC = $(APPDIR)/appinit.c

# If there is more than one source file, append them above, or adjust and
# uncomment the following:
#SRC += foo.c bar.c

# You can also wrap lines by appending a backslash to the end of the line:
#SRC += baz.c \
#xyzzy.c

# uC/OS-II AVR port c source and the main uC/OS-II source
# If you have uC/OS-II v2.52, use the second line!
# UCOSSRC = $(PORTDIR)/os_cpu_c.c $(PORTDIR)/os_dbg.c $(UCOSDIR)/ucos_ii.c
UCOSSRC = $(PORTDIR)/os_cpu_c.c $(UCOSDIR)/ucos_ii.c

# List Assembler source files here.
# Make them end in .asm. This is different from the WinAVR example makefile
ASRC = 

# uC/OS-II AVR port assembler source
UCOSASRC = $(PORTDIR)/os_cpu_a.asm

# List all header files, which are part of this project (only used for tar)
HDRS = os_cfg.h includes.h

# Other files you want to be included in the tar
OTHER = README

# Optional compiler flags.
#  -g:        generate debugging information (for GDB, or for COFF conversion)
#  -O*:       optimization level
#  -f...:     tuning, see gcc manual and avr-libc documentation
#  -Wall...:  warning level
#  -Wa,...:   tell GCC to pass this to the assembler.
#    -ahlms:  create assembler listing
CFLAGS = -O$(OPT) \
	-funsigned-char -funsigned-bitfields -fpack-struct -fshort-enums \
	-Wall -Wstrict-prototypes \
	-Wa,-ahlms=$(OBJOTHDIR)/$(notdir $(<:.c=.lst))



# Optional assembler flags.
#  -Wa,...:   tell GCC to pass this to the assembler.
#  -ahlms:    create listing
#  -gstabs:   have the assembler create line number information; note that
#             for use in COFF files, additional information about filenames
#             and function names needs to be present in the assembler source
#             files -- see avr-libc docs [FIXME: not yet described there]
ASFLAGS = -Wa,-ahlms=$(OBJOTHDIR)/$(notdir $(<:.asm=.lst)),-gstabs 



# Optional linker flags.
#  -Wl,...:   tell GCC to pass this to linker.
#  -Map:      create map file
#  --cref:    add cross reference to  map file
LDFLAGS = -Wl,-Map=$(OBJDIR)/$(TARGET).map,--cref



# Additional libraries
#
# Minimalistic printf version
#LDFLAGS += -Wl,-u,vfprintf -lprintf_min
#
# Floating point printf version (requires -lm below)
#LDFLAGS +=  -Wl,-u,vfprintf -lprintf_flt
#
# -lm = math library
# LDFLAGS += -lm




# Programming support using avrdude. Settings and variables.

# Programming hardware: avrisp stk500 avr910 pavr stk200 pony-stk200
#                       dt006 bascom alf
# Type: avrdude -c ?
# to get a full listing.
#
AVRDUDE_PROGRAMMER = usbasp

#amarender commented next line
#AVRDUDE_PORT = com1	   # programmer connected to serial device
#AVRDUDE_PORT = lpt1	# programmer connected to parallel port
AVRDUDE_PORT = /dev/1-6	   # serial device on *nix
# AVRDUDE_PORT = /dev/ttyS0	   # serial device on *nix
#amarender
AVRDUDE_WRITE_FLASH = -U flash:w:$(TARGET).hex
AVRDUDE_ERASE = -e
AVRDUDE_FLAGS = -p $(MCU) -P $(AVRDUDE_PORT) -c $(AVRDUDE_PROGRAMMER)


# Uncomment the following if you want avrdude's erase cycle counter.
# Note that this counter needs to be initialized first using -Yn,
# see avrdude manual.
#AVRDUDE_ERASE += -y
#
# Uncomment the following if you do /not/ wish a verification to be
# performed after programming the device.
#AVRDUDE_FLAGS += -V
#
# Increase verbosity level.  Please use this when submitting bug
# reports about avrdude. See <http://savannah.nongnu.org/projects/avrdude> 
# to submit bug reports.
#AVRDUDE_FLAGS += -v -v

#amarender
AVRDUDE_FLAGS = -p $(MCU) -P $(AVRDUDE_PORT) -c $(AVRDUDE_PROGRAMMER)
AVRDUDE_FLAGS += $(AVRDUDE_NO_VERIFY)
AVRDUDE_FLAGS += $(AVRDUDE_VERBOSE)
AVRDUDE_FLAGS += $(AVRDUDE_ERASE_COUNTER)

# ---------------------------------------------------------------------------

# Define directories, if needed.
DIRAVR = c:/winavr
DIRAVRBIN = $(DIRAVR)/bin
DIRAVRUTILS = $(DIRAVR)/utils/bin
DIRINC = .
DIRLIB = $(DIRAVR)/avr/lib


# Define programs and commands.
SHELL = sh

CC = avr-gcc

OBJCOPY = avr-objcopy
OBJDUMP = avr-objdump
SIZE = avr-size


# Programming support using avrdude.
#AVRDUDE = sudo avrdude
AVRDUDE = avrdude

REMOVE = rm -f
COPY = cp

HEXSIZE = $(SIZE) --target=$(FORMAT) $(TARGET).hex
ELFSIZE = $(SIZE) -A $(TARGET).elf

FINISH = echo Errors: none
BEGIN = echo -------- begin --------
END = echo --------  end  --------




# Define all object files.
OBJ = $(SRC:.c=.o) $(BOARDSRC:.c=.o) $(APPSRC:.c=.o) $(ASRC:.asm=.o) 
OBJ += $(notdir $(UCOSSRC:.c=.o)) $(notdir $(UCOSASRC:.asm=.o))

# Define all listing files.
LST = $(OBJ:.o=.lst)

# Combine all necessary flags and optional flags. 
# Add target processor to flags.
ALL_CFLAGS = -mmcu=$(MCU) -I. -I$(INCDIR1) -I$(INCDIR2) -I$(INCDIR3) $(CFLAGS)
ALL_ASFLAGS = -mmcu=$(MCU) -I. -I$(INCDIR1) -I$(INCDIR2) -I$(INCDIR3) -x assembler-with-cpp $(ASFLAGS)



# Default target.
all: begin gccversion sizebefore $(TARGET).elf $(TARGET).hex $(TARGET).eep \
	$(TARGET).lss sizeafter finished end


# Eye candy.
# AVR Studio 3.x does not check make's exit code but relies on
# the following magic strings to be generated by the compile job.
begin:
	@$(BEGIN)

finished:
	@$(FINISH)

end:
	@$(END)


# Display size of file.
sizebefore:
	@if [ -f $(TARGET).elf ]; then echo Size before:; $(ELFSIZE);fi

sizeafter:
	@if [ -f $(TARGET).elf ]; then echo Size after:; $(ELFSIZE);fi



# Display compiler version information.
gccversion : 
	$(CC) --version

# Program the device.  The magic trickery below examines the .eep hex
# file whether the size is > 0, and if so, reprograms the EEPROM as
# well.  Just delete these lines if you don't want this feature (like
# on the ATmegas with the EESAVE fuse bit set).
program: $(TARGET).hex $(TARGET).eep
# 	$(AVRDUDE) $(AVRDUDE_FLAGS) $(AVRDUDE_ERASE)
#amarender
	$(AVRDUDE) $(AVRDUDE_FLAGS) $(AVRDUDE_WRITE_FLASH) $(AVRDUDE_WRITE_EEPROM)
#amarender commented next line
#	$(AVRDUDE) $(AVRDUDE_FLAGS) -i $(TARGET).hex $(AVRDUDE_ERASE)
# 	@$(SIZE) --target=$(FORMAT) $(TARGET).eep | while read line; \
# 	do \
# 		set -- $$line; \
# 		if [ "x$$1" != "x0" ] ; then continue; fi; \
# 		if [ "$$2" -ne 0 ] ; then \
# 			echo $(AVRDUDE) $(AVRDUDE_FLAGS) -m eeprom -i $(TARGET).eep; \
# 			$(AVRDUDE) $(AVRDUDE_FLAGS) -m eeprom -i $(TARGET).eep; \
# 			break; \
# 		fi; \
# 	done

tar:
	tar czf $(TARGET)source.tgz $(SRC) $(BOARDSRC) $(APPSRC) $(ASRC) $(HDRS) $(OTHER) makefile


# Create final output files (.hex, .eep) from ELF output file.
%.hex: %.elf
	$(OBJCOPY) -O $(FORMAT) -R .eeprom $(OBJDIR)/$< $(OBJDIR)/$@

%.eep: %.elf
	-$(OBJCOPY) -j .eeprom --set-section-flags=.eeprom="alloc,load" \
	--change-section-lma .eeprom=0 -O $(FORMAT) $(OBJDIR)/$< $(OBJDIR)/$@

# Create extended listing file from ELF output file.
%.lss: %.elf
	$(OBJDUMP) -h -S $(OBJDIR)/$< > $(OBJOTHDIR)/$@



# Link: create ELF output file from object files.
.SECONDARY : $(TARGET).elf
.PRECIOUS : $(OBJ)
%.elf: $(OBJ)
	$(CC) $(ALL_CFLAGS) $(addprefix $(OBJOTHDIR)/,$(notdir $(OBJ))) --output $(OBJDIR)/$@ $(LDFLAGS)


# Compile: create object files from C source files.
%.o : %.c
	$(CC) -c $(ALL_CFLAGS) $< -o $(OBJOTHDIR)/$(notdir $@)


# Assemble: create object files from assembler source files.
%.o : %.asm
	$(CC) -c $(ALL_ASFLAGS) $< -o $(OBJOTHDIR)/$(notdir $@)






# Target: clean project.
clean: begin clean_list finished end

clean_list :
	$(REMOVE) $(OBJDIR)/$(TARGET).hex
	$(REMOVE) $(OBJDIR)/$(TARGET).eep
	$(REMOVE) $(OBJOTHDIR)/$(TARGET).obj
	$(REMOVE) $(OBJOTHDIR)/$(TARGET).cof
	$(REMOVE) $(OBJDIR)/$(TARGET).elf
	$(REMOVE) $(OBJDIR)/$(TARGET).map
	$(REMOVE) $(OBJOTHDIR)/$(TARGET).obj
	$(REMOVE) $(OBJOTHDIR)/$(TARGET).a90
	$(REMOVE) $(OBJOTHDIR)/$(TARGET).sym
	$(REMOVE) $(OBJOTHDIR)/$(TARGET).lnk
	$(REMOVE) $(OBJOTHDIR)/$(TARGET).lss
	$(REMOVE) $(addprefix $(OBJOTHDIR)/, $(notdir $(OBJ)))
	$(REMOVE) $(addprefix $(OBJOTHDIR)/,$(notdir $(LST)))
	$(REMOVE) $(SRC:.c=.d) $(BOARDSRC:.c=.d) $(APPSRC:.c=.d) $(notdir $(UCOSSRC:.c=.d))


# Automatically generate C source code dependencies. 
# (Code originally taken from the GNU make user manual and modified 
# (See README.txt Credits).)
#
# Note that this will work with sh (bash) and sed that is shipped with WinAVR
# (see the SHELL variable defined above).
# This may not work with other shells or other seds.
VPATH=.:$(INCDIR1):$(INCDIR2):$(INCDIR3)
%.d: %.c
	set -e; $(CC) -MM $(ALL_CFLAGS) $< \
	| sed 's/\($(*F)\)\.o[ :]*/\1.o \1.d : /g' > $(@F); \
	[ -s $@ ] || rm -f $@


# Remove the '-' if you want to see the dependency files generated.
-include $(SRC:.c=.d) $(BOARDSRC: .c=.d) $(APPSRC: .c=.d) $(notdir $(UCOSSRC:.c=.d))



# Listing of phony targets.
.PHONY : all begin finish end sizebefore sizeafter gccversion coff extcoff \
	clean clean_list program


