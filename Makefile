						#System Makefile#
						#---------------#

#Project 		: SMS Relay Controller
#Major Version	: 001
#Minor Version	: 001
#Programmer		: Raghavendra C Ganiga
#Programmer		: Pratyush Gehlot

# System editable variables
#----------------------------------------------------------------------------------------------------------------
#Project Name variable with no spaces
PROJECT_NAME = SmsController

# MCU name
MCU = atmega32

# Output format. (can be srec, ihex, binary)
FORMAT = ihex

# Target file name (without extension).
TARGET = main

# Optimization level, can be [0, 1, 2, 3, s]. 0 turns off optimization.
# (Note: 3 is not always the best optimization level. See avr-libc FAQ.)
OPT = 2

#System Strings
FINISH = echo Message: No Errors In Compilation
BEGIN = echo ------SMS Controller Project Compilation Begins-----   
END =   echo ------SMS Controller Project Compilation Ends-------

DIRAVR = c:/winavr

#---------------------------------------------------------------------------------------------------------------

#System non editable variables
#-----------------------------

#System hex file name
TARGET = $(PROJECT_NAME)


# Define programs and commands.
SHELL = sh
CC = avr-gcc
OBJCOPY = avr-objcopy
OBJDUMP = avr-objdump
SIZE = avr-size
AVRDUDE = avrdude
REMOVE = rm -f
COPY = cp

#Folder Structure
#----------------
PROJDIR = .
OBJDIR = $(PROJDIR)/objs
OBJOTHDIR = $(OBJDIR)/other
INCDIR1 = $(PROJDIR)/include
INCDIR2 = $(PROJDIR)/uCOS-II/Source
INCDIR3 = $(PROJDIR)/uCOS-II/Ports/AVR/Atmega32
# List C source files here. (C dependencies are automatically generated.)
MAINFILE = main.c

# List Assembler source files here.
# Make them end in .asm.
ASMFILE = 

# Define all object files.
OBJ = $(MAINFILE:.c=.o) $(ASMFILE:.asm=.o) 

########################################################
#All include makefiles
#---------------------

include Board/Makefile
include App/Makefile
include uCOS-II/Makefile

######################################################

# Optional compiler flags.
#  -g:        generate debugging information (for GDB, or for COFF conversion)
#  -O*:       optimization level
#  -f...:     tuning, see gcc manual and avr-libc documentation
#  -Wall...:  warning level
#  -Wa,...:   tell GCC to pass this to the assembler.
#    -ahlms:  create assembler listing
CFLAGS = -O$(OPT) \
	-funsigned-char -funsigned-bitfields -fpack-struct -fshort-enums \
	-Wall -Wstrict-prototypes \
	-Wa,-ahlms=$(OBJOTHDIR)/$(notdir $(<:.c=.lst))

# Optional assembler flags.
#  -Wa,...:   tell GCC to pass this to the assembler.
#  -ahlms:    create listing
#  -gstabs:   have the assembler create line number information; note that
#             for use in COFF files, additional information about filenames
#             and function names needs to be present in the assembler source
#             files -- see avr-libc docs [FIXME: not yet described there]
ASFLAGS = -Wa,-ahlms=$(OBJOTHDIR)/$(notdir $(<:.asm=.lst)),-gstabs 

# Optional linker flags.
#  -Wl,...:   tell GCC to pass this to linker.
#  -Map:      create map file
#  --cref:    add cross reference to  map file
LDFLAGS = -Wl,-Map=$(OBJDIR)/$(TARGET).map,--cref

# Combine all necessary flags and optional flags. 
# Add target processor to flags.
ALL_CFLAGS = -mmcu=$(MCU) -I. -I$(INCDIR1) -I$(INCDIR2) -I$(INCDIR3) $(CFLAGS)
ALL_ASFLAGS = -mmcu=$(MCU) -I. -I$(INCDIR1) -I$(INCDIR2) -I$(INCDIR3) -x assembler-with-cpp $(ASFLAGS)

#Commands
HEXSIZE = $(SIZE) --target=$(FORMAT) $(OBJDIR)/$(TARGET).hex
ELFSIZE = $(SIZE) -A $(OBJDIR)/$(TARGET).elf

#-------------------------------


#Compilation Targets
#--------------------
# Default target.
all: begin gccversion sizebefore $(TARGET).elf $(TARGET).hex $(TARGET).eep \
	$(TARGET).lss sizeafter finished end


# Eye candy.
# AVR Studio 3.x does not check make's exit code but relies on
# the following magic strings to be generated by the compile job.
begin:
	@$(BEGIN)

finished:
	@$(FINISH)

end:
	@$(END)

# Display size of file.
sizebefore:
	@if [ -f $(OBJDIR)/$(TARGET).elf ]; then echo Size before:; $(ELFSIZE);fi

sizeafter:
	@if [ -f $(OBJDIR)/$(TARGET).elf ]; then echo Size after:; $(ELFSIZE);fi

# Display compiler version information.
gccversion : 
	$(CC) --version

# Create final output files (.hex, .eep) from ELF output file.
%.hex: %.elf
	$(OBJCOPY) -O $(FORMAT) -R .eeprom $(OBJDIR)/$< $(OBJDIR)/$@

%.eep: %.elf
	-$(OBJCOPY) -j .eeprom --set-section-flags=.eeprom="alloc,load" \
	--change-section-lma .eeprom=0 -O $(FORMAT) $(OBJDIR)/$< $(OBJDIR)/$@

# Create extended listing file from ELF output file.
%.lss: %.elf
	$(OBJDUMP) -h -S $(OBJDIR)/$< > $(OBJOTHDIR)/$@

# Link: create ELF output file from object files.
%.elf: $(OBJ)
	$(CC) $(ALL_CFLAGS) $(addprefix $(OBJOTHDIR)/,$(notdir $(OBJ))) --output $(OBJDIR)/$@ $(LDFLAGS)


# Compile: create object files from C source files.
%.o : %.c
	$(CC) -c $(ALL_CFLAGS) $< -o $(OBJOTHDIR)/$(notdir $@)


# Assemble: create object files from assembler source files.
%.o : %.asm
	$(CC) -c $(ALL_ASFLAGS) $< -o $(OBJOTHDIR)/$(notdir $@)

# Target: clean project.
clean: begin clean_list finished end

clean_list :
	$(REMOVE) $(OBJDIR)/$(TARGET).elf
	$(REMOVE) $(OBJDIR)/$(TARGET).map
	$(REMOVE) $(OBJDIR)/$(TARGET).hex
	$(REMOVE) $(OBJDIR)/$(TARGET).eep
	$(REMOVE) $(OBJOTHDIR)/*.o
	$(REMOVE) $(OBJOTHDIR)/*.lss
	$(REMOVE) $(OBJOTHDIR)/*.d
	$(REMOVE) $(OBJOTHDIR)/*.lst	

# Programming support using avrdude. Settings and variables.

# Programming hardware: avrisp stk500 avr910 pavr stk200 pony-stk200
#                       dt006 bascom alf
# Type: avrdude -c ?
# to get a full listing.
#
AVRDUDE_PROGRAMMER = usbasp

#amarender commented next line
#AVRDUDE_PORT = com1	   # programmer connected to serial device
#AVRDUDE_PORT = lpt1	# programmer connected to parallel port
AVRDUDE_PORT = /dev/1-6	   # serial device on *nix
# AVRDUDE_PORT = /dev/ttyS0	   # serial device on *nix
#amarender
AVRDUDE_WRITE_FLASH = -U flash:w:$(OBJDIR)/$(TARGET).hex
AVRDUDE_ERASE = -e
AVRDUDE_FLAGS = -p $(MCU) -P $(AVRDUDE_PORT) -c $(AVRDUDE_PROGRAMMER)
AVRDUDE_FLAGS += $(AVRDUDE_NO_VERIFY)
AVRDUDE_FLAGS += $(AVRDUDE_VERBOSE)
AVRDUDE_FLAGS += $(AVRDUDE_ERASE_COUNTER)

# ---------------------------------------------------------------------------

# Define directories, if needed.
DIRAVRBIN = $(DIRAVR)/bin
DIRAVRUTILS = $(DIRAVR)/utils/bin
DIRINC = .
DIRLIB = $(DIRAVR)/avr/lib

# Program the device.  The magic trickery below examines the .eep hex
# file whether the size is > 0, and if so, reprograms the EEPROM as
# well.  Just delete these lines if you don't want this feature (like
# on the ATmegas with the EESAVE fuse bit set).
program: $(OBJDIR)/$(TARGET).hex $(OBJDIR)/$(TARGET).eep
	$(AVRDUDE) $(AVRDUDE_FLAGS) $(AVRDUDE_WRITE_FLASH) $(AVRDUDE_WRITE_EEPROM)
	
# Listing of phony targets.
.PHONY : all begin finish end sizebefore sizeafter gccversion coff extcoff \
	clean clean_list program 
